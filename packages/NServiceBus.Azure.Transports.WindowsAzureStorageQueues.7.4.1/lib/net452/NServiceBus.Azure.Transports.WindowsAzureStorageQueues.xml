<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Azure.Transports.WindowsAzureStorageQueues</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.AzureStorageQueues.AtMostOnceReceiveStrategy">
            <summary>
            At-most-once receive strategy receives at most once, acking first, then processing the message.
            If the pipeline fails, the message is not processed any longer. No first or second level retries are executed.
            </summary>
        </member>
        <member name="T:NServiceBus.AzureStorageQueues.AzureMessageQueueCreator">
            <summary>
            Creates the queues. Note that this class will only be invoked when running the windows host and not when running in
            the fabric
            </summary>
        </member>
        <member name="P:NServiceBus.AzureStorageQueues.AzureMessageQueueReceiver.PurgeOnStartup">
            <summary>
            Sets whether or not the transport should purge the input
            queue when it is started.
            </summary>
        </member>
        <member name="P:NServiceBus.AzureStorageQueues.AzureMessageQueueReceiver.MessageInvisibleTime">
            <summary>
            Controls how long messages should be invisible to other callers when receiving messages from the queue
            </summary>
        </member>
        <member name="P:NServiceBus.AzureStorageQueues.AzureMessageQueueReceiver.BatchSize">
            <summary>
            Controls the number of messages that will be read in bulk from the queue
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageQueues.BackoffStrategy.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            </summary>
            <param name="peekInterval">The amount of time, in milliseconds, to add to the time to wait before checking for a new message</param>
            <param name="maximumWaitTimeWhenIdle">The maximum amount of time that the queue will wait before checking for a new message</param>
        </member>
        <member name="M:NServiceBus.AzureStorageQueues.MessageRetrieved.Unwrap">
            <summary>
            Unwraps the raw message body.
            </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when the raw message could not be unwrapped. The raw message is automatically moved to the error queue before this exception is thrown.</exception>
            <returns>The actual message wrapper.</returns>
        </member>
        <member name="M:NServiceBus.AzureStorageQueues.MessageRetrieved.Ack">
            <summary>
            Acknowledges the successful processing of the message.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageQueues.MessageRetrieved.Nack">
            <summary>
            Rejects the message requeueing it in the queue.
            </summary>
        </member>
        <member name="T:NServiceBus.AzureStorageQueueTransport">
            <summary>
            Transport definition for AzureStorageQueue
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.PeekInterval(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport},System.TimeSpan)">
            <summary>
            Sets the amount of time to add to the time to wait before checking for a new message
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.MaximumWaitTimeWhenIdle(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport},System.TimeSpan)">
            <summary>
            Sets the maximum amount of time, in milliseconds, that the queue will wait before checking for a new message
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.MessageInvisibleTime(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport},System.TimeSpan)">
            <summary>
            Controls how long messages should be invisible to other callers when receiving messages from the queue
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.BatchSize(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport},System.Int32)">
            <summary>
            Controls how many messages should be read from the queue at once
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.SerializeMessageWrapperWith``1(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport})">
            <summary>
            Sets a custom serialization for <see cref="T:NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper" /> if your configurations uses serialization different
            from <see cref="T:NServiceBus.XmlSerializer" /> or <see cref="T:NServiceBus.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.UnwrapMessagesWith(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport},System.Func{Microsoft.WindowsAzure.Storage.Queue.CloudQueueMessage,NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper})">
            <summary>
            Registers a custom unwrapper to convert native messages to <see cref="T:NServiceBus.Azure.Transports.WindowsAzureStorageQueues.MessageWrapper" />. This is needed when receiving raw json/xml/etc messages from non NServiceBus endpoints.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.UseSha1ForShortening(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport})">
            <summary>
            Overrides default Md5 shortener for creating queue names with Sha1 shortener.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.DegreeOfReceiveParallelism(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport},System.Int32)">
            <summary>
            Sets the degree of parallelism that should be used to receive messages.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportExtensions.DelayedDelivery(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport})">
            <summary>
            Configures delayed delivery features of this transport.
            </summary>
        </member>
        <member name="T:NServiceBus.DelayedDeliverySettings">
            <summary>Configures native delayed delivery.</summary>
        </member>
        <member name="M:NServiceBus.DelayedDeliverySettings.UseTableName(System.String)">
            <summary>Override the default table name used for storing delayed messages.</summary>
            <param name="delayedMessagesTableName">New table name.</param>
        </member>
        <member name="M:NServiceBus.DelayedDeliverySettings.DisableTimeoutManager">
            <summary>Disables the Timeout Manager for the endpoint. Before disabling ensure there all timeouts in the timeout store have been processed or migrated.</summary>
        </member>
        <member name="T:NServiceBus.AccountConfigurations">
            <summary>
            Holds mappings for used accounts.
            </summary>
        </member>
        <member name="T:NServiceBus.AccountRoutingSettings">
            <summary>
            Provides methods to define routing between Azure Storage accounts and map them to a logical alias instead of using bare
            connection strings.
            </summary>
        </member>
        <member name="M:NServiceBus.AccountRoutingSettings.AddAccount(System.String,System.String)">
            <summary>
            Adds the mapping between the <paramref alias="alias" /> and its <paramref alias="connectionString" />.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageAddressingSettings.Map(System.String)">
            <summary>
            Maps the account name to a connection string, throwing when no mapping found.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageAddressingSettings.ApplyMappingToAliases(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Transforms all the <see cref="T:NServiceBus.AzureStorageQueues.Config.QueueAddress" /> in <see cref="F:NServiceBus.AzureStorageAddressingSettings.headersToApplyNameMapping" /> to use logical names.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageAddressingSettings.ApplyMappingOnOutgoingHeaders(System.Collections.Generic.Dictionary{System.String,System.String},NServiceBus.AzureStorageQueues.Config.QueueAddress)">
            <summary>
            Transforms all the <see cref="T:NServiceBus.AzureStorageQueues.Config.QueueAddress" /> in <see cref="F:NServiceBus.AzureStorageAddressingSettings.headersToApplyNameMapping" /> to connection string
            values to maintain backward compatibility.
            </summary>
        </member>
        <member name="M:NServiceBus.AzureStorageTransportAddressingExtensions.AccountRouting(NServiceBus.TransportExtensions{NServiceBus.AzureStorageQueueTransport})">
            <summary>
            Provides access to configure cross account routing.
            </summary>
        </member>
        <member name="T:NServiceBus.Azure.Transports.WindowsAzureStorageQueues.DelayDelivery.DelayedMessageEntity">
            <summary>
            Represents a record in the native delays storage table which can be deferred message, saga timeouts, and delayed retries.
            </summary>
        </member>
        <member name="T:SimpleJson.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray" /> class.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray" /> class.
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:SimpleJson.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:SimpleJson.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:SimpleJson.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject" />.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject" />.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when
            comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type
            of the key.
            </param>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object" /> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A json <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:SimpleJson.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and
            JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:SimpleJson.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.SerializeObject(System.Object,SimpleJson.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
    </members>
</doc>
